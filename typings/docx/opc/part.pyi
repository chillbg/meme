"""
This type stub file was generated by pyright.
"""

from .shared import lazyproperty

"""
Open Packaging Convention (OPC)"""
class Part:
    """
    Base class for package part"""
    def __init__(self, partname, content_type, blob=..., package=...) -> None:
        ...
    
    def after_unmarshal(self): # -> None:
        """
        Entry point for post-un"""
        ...
    
    def before_marshal(self): # -> None:
        """
        Entry point for pre-ser"""
        ...
    
    @property
    def blob(self): # -> Unknown:
        """
        Contents of this packag"""
        ...
    
    @property
    def content_type(self): # -> Unknown:
        """
        Content type of this pa"""
        ...
    
    def drop_rel(self, rId): # -> None:
        """
        Remove the relationship"""
        ...
    
    @classmethod
    def load(cls, partname, content_type, blob, package): # -> Self@Part:
        ...
    
    def load_rel(self, reltype, target, rId, is_external=...): # -> Any:
        """
        Return newly added |_Re"""
        ...
    
    @property
    def package(self): # -> Unknown:
        """
        |OpcPackage| instance t"""
        ...
    
    @property
    def partname(self): # -> Unknown | PackURI:
        """
        |PackURI| instance hold"""
        ...
    
    @partname.setter
    def partname(self, partname): # -> None:
        ...
    
    def part_related_by(self, reltype): # -> Any:
        """
        Return part to which th"""
        ...
    
    def relate_to(self, target, reltype, is_external=...): # -> Any:
        """
        Return rId key of relat"""
        ...
    
    @property
    def related_parts(self): # -> Any:
        """
        Dictionary mapping rela"""
        ...
    
    @lazyproperty
    def rels(self): # -> Relationships:
        """
        |Relationships| instanc"""
        ...
    
    def target_ref(self, rId): # -> Any:
        """
        Return URL contained in"""
        ...
    


class PartFactory:
    """
    Provides a way for client c"""
    part_class_selector = ...
    part_type_for = ...
    default_part_type = Part
    def __new__(cls, partname, content_type, reltype, blob, package): # -> default_part_type | Any:
        ...
    


class XmlPart(Part):
    """
    Base class for package part"""
    def __init__(self, partname, content_type, element, package) -> None:
        ...
    
    @property
    def blob(self):
        ...
    
    @property
    def element(self):
        """
        The root XML element of"""
        ...
    
    @classmethod
    def load(cls, partname, content_type, blob, package): # -> Self@XmlPart:
        ...
    
    @property
    def part(self): # -> Self@XmlPart:
        """
        Part of the parent prot"""
        ...
    


