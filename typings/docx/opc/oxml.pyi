"""
This type stub file was generated by pyright.
"""

from lxml import etree

"""
Temporary stand-in for main oxm"""
element_class_lookup = ...
oxml_parser = ...
nsmap = ...
def parse_xml(text): # -> Any:
    """
    ``etree.fromstring()`` repl"""
    ...

def qn(tag): # -> str:
    """
    Stands for "qualified name""""
    ...

def serialize_part_xml(part_elm):
    """
    Serialize *part_elm* etree """
    ...

def serialize_for_reading(element):
    """
    Serialize *element* to huma"""
    ...

class BaseOxmlElement(etree.ElementBase):
    """
    Base class for all custom e"""
    @property
    def xml(self):
        """
        Return XML string for t"""
        ...
    


class CT_Default(BaseOxmlElement):
    """
    ``<Default>`` element, spec"""
    @property
    def content_type(self):
        """
        String held in the ``Co"""
        ...
    
    @property
    def extension(self):
        """
        String held in the ``Ex"""
        ...
    
    @staticmethod
    def new(ext, content_type): # -> Any:
        """
        Return a new ``<Default"""
        ...
    


class CT_Override(BaseOxmlElement):
    """
    ``<Override>`` element, spe"""
    @property
    def content_type(self):
        """
        String held in the ``Co"""
        ...
    
    @staticmethod
    def new(partname, content_type): # -> Any:
        """
        Return a new ``<Overrid"""
        ...
    
    @property
    def partname(self):
        """
        String held in the ``Pa"""
        ...
    


class CT_Relationship(BaseOxmlElement):
    """
    ``<Relationship>`` element,"""
    @staticmethod
    def new(rId, reltype, target, target_mode=...): # -> Any:
        """
        Return a new ``<Relatio"""
        ...
    
    @property
    def rId(self):
        """
        String held in the ``Id"""
        ...
    
    @property
    def reltype(self):
        """
        String held in the ``Ty"""
        ...
    
    @property
    def target_ref(self):
        """
        String held in the ``Ta"""
        ...
    
    @property
    def target_mode(self): # -> Any:
        """
        String held in the ``Ta"""
        ...
    


class CT_Relationships(BaseOxmlElement):
    """
    ``<Relationships>`` element"""
    def add_rel(self, rId, reltype, target, is_external=...): # -> None:
        """
        Add a child ``<Relation"""
        ...
    
    @staticmethod
    def new(): # -> Any:
        """
        Return a new ``<Relatio"""
        ...
    
    @property
    def Relationship_lst(self):
        """
        Return a list containin"""
        ...
    
    @property
    def xml(self):
        """
        Return XML string for t"""
        ...
    


class CT_Types(BaseOxmlElement):
    """
    ``<Types>`` element, the co"""
    def add_default(self, ext, content_type): # -> None:
        """
        Add a child ``<Default>"""
        ...
    
    def add_override(self, partname, content_type): # -> None:
        """
        Add a child ``<Override"""
        ...
    
    @property
    def defaults(self):
        ...
    
    @staticmethod
    def new(): # -> Any:
        """
        Return a new ``<Types>`"""
        ...
    
    @property
    def overrides(self):
        ...
    


ct_namespace = ...
pr_namespace = ...
