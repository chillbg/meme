"""
This type stub file was generated by pyright.
"""

"""
Base classes and other objects """
def alias(*aliases): # -> (cls: Unknown) -> Unknown:
    """
    Decorating a class with @al"""
    ...

class _DocsPageFormatter:
    """Generate an .rst doc page for an"""
    def __init__(self, clsname, clsdict) -> None:
        ...
    
    @property
    def page_str(self): # -> str:
        """
        The RestructuredText do"""
        ...
    


class MetaEnumeration(type):
    """
    The metaclass for Enumerati"""
    def __new__(meta, clsname, bases, clsdict): # -> Self@MetaEnumeration:
        ...
    


class EnumerationBase:
    """
    Base class for all enumerat"""
    __members__ = ...
    __ms_name__ = ...
    @classmethod
    def validate(cls, value): # -> None:
        """
        Raise |ValueError| if *"""
        ...
    


Enumeration = ...
class XmlEnumeration(Enumeration):
    """
    Provides ``to_xml()`` and `"""
    __members__ = ...
    __ms_name__ = ...
    @classmethod
    def from_xml(cls, xml_val):
        """
        Return the enumeration """
        ...
    
    @classmethod
    def to_xml(cls, enum_val):
        """
        Return the XML value of"""
        ...
    


class EnumMember:
    """
    Used in the enumeration cla"""
    def __init__(self, name, value, docstring) -> None:
        ...
    
    def add_to_enum(self, clsdict): # -> None:
        """
        Add a name to *clsdict*"""
        ...
    
    @property
    def docstring(self): # -> Unknown:
        """
        The description of this"""
        ...
    
    @property
    def name(self): # -> Unknown:
        """
        The distinguishing name"""
        ...
    
    def register_name(self, clsdict): # -> None:
        """
        Add a member name to th"""
        ...
    
    @property
    def valid_settings(self): # -> tuple[EnumValue | Unknown]:
        """
        A sequence containing t"""
        ...
    
    @property
    def value(self): # -> EnumValue | Unknown:
        """
        The enumeration value f"""
        ...
    


class EnumValue(int):
    """
    A named enumeration value, """
    def __new__(cls, member_name, int_value, docstring): # -> Self@EnumValue:
        ...
    
    def __init__(self, member_name, int_value, docstring) -> None:
        ...
    
    @property
    def __doc__(self):
        """
        The description of this"""
        ...
    
    def __str__(self) -> str:
        """
        The symbolic name and s"""
        ...
    


class ReturnValueOnlyEnumMember(EnumMember):
    """
    Used to define a member of """
    @property
    def valid_settings(self): # -> tuple[()]:
        """
        No settings are valid f"""
        ...
    


class XmlMappedEnumMember(EnumMember):
    """
    Used to define a member who"""
    def __init__(self, name, value, xml_value, docstring) -> None:
        ...
    
    def add_to_enum(self, clsdict): # -> None:
        """
        Compile XML mappings in"""
        ...
    
    def register_xml_mapping(self, clsdict): # -> None:
        """
        Add XML mappings to the"""
        ...
    
    @property
    def xml_value(self): # -> Unknown:
        """
        The XML attribute value"""
        ...
    


