"""
This type stub file was generated by pyright.
"""

from ..xmlchemy import BaseOxmlElement

"""
Custom element classes related """
class CT_Color(BaseOxmlElement):
    """
    `w:color` element, specifyi"""
    val = ...
    themeColor = ...


class CT_Fonts(BaseOxmlElement):
    """
    ``<w:rFonts>`` element, spe"""
    ascii = ...
    hAnsi = ...


class CT_Highlight(BaseOxmlElement):
    """
    `w:highlight` element, spec"""
    val = ...


class CT_HpsMeasure(BaseOxmlElement):
    """
    Used for ``<w:sz>`` element"""
    val = ...


class CT_RPr(BaseOxmlElement):
    """
    ``<w:rPr>`` element, contai"""
    _tag_seq = ...
    rStyle = ...
    rFonts = ...
    b = ...
    bCs = ...
    i = ...
    iCs = ...
    caps = ...
    smallCaps = ...
    strike = ...
    dstrike = ...
    outline = ...
    shadow = ...
    emboss = ...
    imprint = ...
    noProof = ...
    snapToGrid = ...
    vanish = ...
    webHidden = ...
    color = ...
    sz = ...
    highlight = ...
    u = ...
    vertAlign = ...
    rtl = ...
    cs = ...
    specVanish = ...
    oMath = ...
    @property
    def highlight_val(self): # -> None:
        """
        Value of `w:highlight/@"""
        ...
    
    @highlight_val.setter
    def highlight_val(self, value): # -> None:
        ...
    
    @property
    def rFonts_ascii(self): # -> None:
        """
        The value of `w:rFonts/"""
        ...
    
    @rFonts_ascii.setter
    def rFonts_ascii(self, value): # -> None:
        ...
    
    @property
    def rFonts_hAnsi(self): # -> None:
        """
        The value of `w:rFonts/"""
        ...
    
    @rFonts_hAnsi.setter
    def rFonts_hAnsi(self, value): # -> None:
        ...
    
    @property
    def style(self): # -> None:
        """
        String contained in <w:"""
        ...
    
    @style.setter
    def style(self, style): # -> None:
        """
        Set val attribute of <w"""
        ...
    
    @property
    def subscript(self): # -> bool | None:
        """
        |True| if `w:vertAlign/"""
        ...
    
    @subscript.setter
    def subscript(self, value): # -> None:
        ...
    
    @property
    def superscript(self): # -> bool | None:
        """
        |True| if `w:vertAlign/"""
        ...
    
    @superscript.setter
    def superscript(self, value): # -> None:
        ...
    
    @property
    def sz_val(self): # -> None:
        """
        The value of `w:sz/@w:v"""
        ...
    
    @sz_val.setter
    def sz_val(self, value): # -> None:
        ...
    
    @property
    def u_val(self): # -> None:
        """
        Value of `w:u/@val`, or"""
        ...
    
    @u_val.setter
    def u_val(self, value): # -> None:
        ...
    


class CT_Underline(BaseOxmlElement):
    """
    ``<w:u>`` element, specifyi"""
    @property
    def val(self): # -> bool:
        """
        The underline type corr"""
        ...
    
    @val.setter
    def val(self, value): # -> None:
        ...
    


class CT_VerticalAlignRun(BaseOxmlElement):
    """
    ``<w:vertAlign>`` element, """
    val = ...


