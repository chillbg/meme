"""
This type stub file was generated by pyright.
"""

from .xmlchemy import BaseOxmlElement

"""
Custom element classes related """
def styleId_from_name(name): # -> str:
    """
    Return the style id corresp"""
    ...

class CT_LatentStyles(BaseOxmlElement):
    """
    `w:latentStyles` element, d"""
    lsdException = ...
    count = ...
    defLockedState = ...
    defQFormat = ...
    defSemiHidden = ...
    defUIPriority = ...
    defUnhideWhenUsed = ...
    def bool_prop(self, attr_name): # -> Any | Literal[False]:
        """
        Return the boolean valu"""
        ...
    
    def get_by_name(self, name): # -> None:
        """
        Return the `w:lsdExcept"""
        ...
    
    def set_bool_prop(self, attr_name, value): # -> None:
        """
        Set the on/off attribut"""
        ...
    


class CT_LsdException(BaseOxmlElement):
    """
    ``<w:lsdException>`` elemen"""
    locked = ...
    name = ...
    qFormat = ...
    semiHidden = ...
    uiPriority = ...
    unhideWhenUsed = ...
    def delete(self): # -> None:
        """
        Remove this `w:lsdExcep"""
        ...
    
    def on_off_prop(self, attr_name): # -> Any:
        """
        Return the boolean valu"""
        ...
    
    def set_on_off_prop(self, attr_name, value): # -> None:
        """
        Set the on/off attribut"""
        ...
    


class CT_Style(BaseOxmlElement):
    """
    A ``<w:style>`` element, re"""
    _tag_seq = ...
    name = ...
    basedOn = ...
    next = ...
    uiPriority = ...
    semiHidden = ...
    unhideWhenUsed = ...
    qFormat = ...
    locked = ...
    pPr = ...
    rPr = ...
    type = ...
    styleId = ...
    default = ...
    customStyle = ...
    @property
    def basedOn_val(self): # -> None:
        """
        Value of `w:basedOn/@w:"""
        ...
    
    @basedOn_val.setter
    def basedOn_val(self, value): # -> None:
        ...
    
    @property
    def base_style(self): # -> None:
        """
        Sibling CT_Style elemen"""
        ...
    
    def delete(self): # -> None:
        """
        Remove this `w:style` e"""
        ...
    
    @property
    def locked_val(self): # -> Literal[False]:
        """
        Value of `w:locked/@w:v"""
        ...
    
    @locked_val.setter
    def locked_val(self, value): # -> None:
        ...
    
    @property
    def name_val(self): # -> None:
        """
        Value of ``<w:name>`` c"""
        ...
    
    @name_val.setter
    def name_val(self, value): # -> None:
        ...
    
    @property
    def next_style(self): # -> None:
        """
        Sibling CT_Style elemen"""
        ...
    
    @property
    def qFormat_val(self): # -> Literal[False]:
        """
        Value of `w:qFormat/@w:"""
        ...
    
    @qFormat_val.setter
    def qFormat_val(self, value): # -> None:
        ...
    
    @property
    def semiHidden_val(self): # -> Literal[False]:
        """
        Value of ``<w:semiHidde"""
        ...
    
    @semiHidden_val.setter
    def semiHidden_val(self, value): # -> None:
        ...
    
    @property
    def uiPriority_val(self): # -> None:
        """
        Value of ``<w:uiPriorit"""
        ...
    
    @uiPriority_val.setter
    def uiPriority_val(self, value): # -> None:
        ...
    
    @property
    def unhideWhenUsed_val(self): # -> Literal[False]:
        """
        Value of `w:unhideWhenU"""
        ...
    
    @unhideWhenUsed_val.setter
    def unhideWhenUsed_val(self, value): # -> None:
        ...
    


class CT_Styles(BaseOxmlElement):
    """
    ``<w:styles>`` element, the"""
    _tag_seq = ...
    latentStyles = ...
    style = ...
    def add_style_of_type(self, name, style_type, builtin):
        """
        Return a newly added `w"""
        ...
    
    def default_for(self, style_type): # -> None:
        """
        Return `w:style[@w:type"""
        ...
    
    def get_by_id(self, styleId): # -> None:
        """
        Return the ``<w:style>`"""
        ...
    
    def get_by_name(self, name): # -> None:
        """
        Return the ``<w:style>`"""
        ...
    


