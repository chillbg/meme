"""
This type stub file was generated by pyright.
"""

from .xmlchemy import BaseOxmlElement

"""Custom element classes for table"""
class CT_Height(BaseOxmlElement):
    """
    Used for ``<w:trHeight>`` t"""
    val = ...
    hRule = ...


class CT_Row(BaseOxmlElement):
    """
    ``<w:tr>`` element
    """
    tblPrEx = ...
    trPr = ...
    tc = ...
    def tc_at_grid_col(self, idx):
        """
        The ``<w:tc>`` element """
        ...
    
    @property
    def tr_idx(self):
        """
        The index of this ``<w:"""
        ...
    
    @property
    def trHeight_hRule(self): # -> None:
        """
        Return the value of `w:"""
        ...
    
    @trHeight_hRule.setter
    def trHeight_hRule(self, value): # -> None:
        ...
    
    @property
    def trHeight_val(self): # -> None:
        """
        Return the value of `w:"""
        ...
    
    @trHeight_val.setter
    def trHeight_val(self, value): # -> None:
        ...
    


class CT_Tbl(BaseOxmlElement):
    """
    ``<w:tbl>`` element
    """
    tblPr = ...
    tblGrid = ...
    tr = ...
    @property
    def bidiVisual_val(self): # -> None:
        """
        Value of `w:tblPr/w:bid"""
        ...
    
    @bidiVisual_val.setter
    def bidiVisual_val(self, value): # -> None:
        ...
    
    @property
    def col_count(self): # -> int:
        """
        The number of grid colu"""
        ...
    
    def iter_tcs(self): # -> Generator[Unknown, None, None]:
        """
        Generate each of the `w"""
        ...
    
    @classmethod
    def new_tbl(cls, rows, cols, width): # -> Any:
        """
        Return a new `w:tbl` el"""
        ...
    
    @property
    def tblStyle_val(self): # -> None:
        """
        Value of `w:tblPr/w:tbl"""
        ...
    
    @tblStyle_val.setter
    def tblStyle_val(self, styleId): # -> None:
        """
        Set the value of `w:tbl"""
        ...
    


class CT_TblGrid(BaseOxmlElement):
    """
    ``<w:tblGrid>`` element, ch"""
    gridCol = ...


class CT_TblGridCol(BaseOxmlElement):
    """
    ``<w:gridCol>`` element, ch"""
    w = ...
    @property
    def gridCol_idx(self):
        """
        The index of this ``<w:"""
        ...
    


class CT_TblLayoutType(BaseOxmlElement):
    """
    ``<w:tblLayout>`` element, """
    type = ...


class CT_TblPr(BaseOxmlElement):
    """
    ``<w:tblPr>`` element, chil"""
    _tag_seq = ...
    tblStyle = ...
    bidiVisual = ...
    jc = ...
    tblLayout = ...
    @property
    def alignment(self): # -> None:
        """
        Member of :ref:`WdRowAl"""
        ...
    
    @alignment.setter
    def alignment(self, value): # -> None:
        ...
    
    @property
    def autofit(self): # -> bool:
        """
        Return |False| if there"""
        ...
    
    @autofit.setter
    def autofit(self, value): # -> None:
        ...
    
    @property
    def style(self): # -> None:
        """
        Return the value of the"""
        ...
    
    @style.setter
    def style(self, value): # -> None:
        ...
    


class CT_TblWidth(BaseOxmlElement):
    """
    Used for ``<w:tblW>`` and `"""
    w = ...
    type = ...
    @property
    def width(self): # -> Length | None:
        """
        Return the EMU length v"""
        ...
    
    @width.setter
    def width(self, value): # -> None:
        ...
    


class CT_Tc(BaseOxmlElement):
    """`w:tc` table cell element"""
    tcPr = ...
    p = ...
    tbl = ...
    @property
    def bottom(self):
        """
        The row index that mark"""
        ...
    
    def clear_content(self): # -> None:
        """
        Remove all content chil"""
        ...
    
    @property
    def grid_span(self): # -> Literal[1]:
        """
        The integer number of c"""
        ...
    
    @grid_span.setter
    def grid_span(self, value): # -> None:
        ...
    
    def iter_block_items(self): # -> Generator[Unknown, None, None]:
        """
        Generate a reference to"""
        ...
    
    @property
    def left(self): # -> Literal[0]:
        """
        The grid column index a"""
        ...
    
    def merge(self, other_tc):
        """
        Return the top-left ``<"""
        ...
    
    @classmethod
    def new(cls): # -> Any:
        """
        Return a new ``<w:tc>``"""
        ...
    
    @property
    def right(self): # -> int:
        """
        The grid column index t"""
        ...
    
    @property
    def top(self):
        """
        The top-most row index """
        ...
    
    @property
    def vMerge(self): # -> None:
        """
        The value of the ./w:tc"""
        ...
    
    @vMerge.setter
    def vMerge(self, value): # -> None:
        ...
    
    @property
    def width(self): # -> None:
        """
        Return the EMU length v"""
        ...
    
    @width.setter
    def width(self, value): # -> None:
        ...
    


class CT_TcPr(BaseOxmlElement):
    """
    ``<w:tcPr>`` element, defin"""
    _tag_seq = ...
    tcW = ...
    gridSpan = ...
    vMerge = ...
    vAlign = ...
    @property
    def grid_span(self): # -> Literal[1]:
        """
        The integer number of c"""
        ...
    
    @grid_span.setter
    def grid_span(self, value): # -> None:
        ...
    
    @property
    def vAlign_val(self): # -> None:
        """Value of `w:val` attribute on  `"""
        ...
    
    @vAlign_val.setter
    def vAlign_val(self, value): # -> None:
        ...
    
    @property
    def vMerge_val(self): # -> None:
        """
        The value of the ./w:vM"""
        ...
    
    @vMerge_val.setter
    def vMerge_val(self, value): # -> None:
        ...
    
    @property
    def width(self): # -> None:
        """
        Return the EMU length v"""
        ...
    
    @width.setter
    def width(self, value): # -> None:
        ...
    


class CT_TrPr(BaseOxmlElement):
    """
    ``<w:trPr>`` element, defin"""
    _tag_seq = ...
    trHeight = ...
    @property
    def trHeight_hRule(self): # -> None:
        """
        Return the value of `w:"""
        ...
    
    @trHeight_hRule.setter
    def trHeight_hRule(self, value): # -> None:
        ...
    
    @property
    def trHeight_val(self): # -> None:
        """
        Return the value of `w:"""
        ...
    
    @trHeight_val.setter
    def trHeight_val(self, value): # -> None:
        ...
    


class CT_VerticalJc(BaseOxmlElement):
    """`w:vAlign` element, specifying v"""
    val = ...


class CT_VMerge(BaseOxmlElement):
    """
    ``<w:vMerge>`` element, spe"""
    val = ...


