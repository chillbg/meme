"""
This type stub file was generated by pyright.
"""

from .blkcntnr import BlockItemContainer
from .shared import Parented, lazyproperty

"""
The |Table| object and related """
class Table(Parented):
    """
    Proxy class for a Wordproce"""
    def __init__(self, tbl, parent) -> None:
        ...
    
    def add_column(self, width): # -> _Column:
        """
        Return a |_Column| obje"""
        ...
    
    def add_row(self): # -> _Row:
        """
        Return a |_Row| instanc"""
        ...
    
    @property
    def alignment(self):
        """
        Read/write. A member of"""
        ...
    
    @alignment.setter
    def alignment(self, value): # -> None:
        ...
    
    @property
    def autofit(self):
        """
        |True| if column widths"""
        ...
    
    @autofit.setter
    def autofit(self, value): # -> None:
        ...
    
    def cell(self, row_idx, col_idx):
        """
        Return |_Cell| instance"""
        ...
    
    def column_cells(self, column_idx): # -> list[Unknown]:
        """
        Sequence of cells in th"""
        ...
    
    @lazyproperty
    def columns(self): # -> _Columns:
        """
        |_Columns| instance rep"""
        ...
    
    def row_cells(self, row_idx): # -> list[Unknown]:
        """
        Sequence of cells in th"""
        ...
    
    @lazyproperty
    def rows(self): # -> _Rows:
        """
        |_Rows| instance contai"""
        ...
    
    @property
    def style(self):
        """
        Read/write. A |_TableSt"""
        ...
    
    @style.setter
    def style(self, style_or_name): # -> None:
        ...
    
    @property
    def table(self): # -> Self@Table:
        """
        Provide child objects w"""
        ...
    
    @property
    def table_direction(self):
        """
        A member of :ref:`WdTab"""
        ...
    
    @table_direction.setter
    def table_direction(self, value): # -> None:
        ...
    


class _Cell(BlockItemContainer):
    """Table cell"""
    def __init__(self, tc, parent) -> None:
        ...
    
    def add_paragraph(self, text=..., style=...): # -> Paragraph:
        """
        Return a paragraph newl"""
        ...
    
    def add_table(self, rows, cols): # -> Table:
        """
        Return a table newly ad"""
        ...
    
    def merge(self, other_cell): # -> _Cell:
        """
        Return a merged cell cr"""
        ...
    
    @property
    def paragraphs(self): # -> list[Paragraph]:
        """
        List of paragraphs in t"""
        ...
    
    @property
    def tables(self): # -> list[Table]:
        """
        List of tables in the c"""
        ...
    
    @property
    def text(self): # -> str:
        """
        The entire contents of """
        ...
    
    @text.setter
    def text(self, text): # -> None:
        """
        Write-only. Set entire """
        ...
    
    @property
    def vertical_alignment(self): # -> None:
        """Member of :ref:`WdCellVerticalAl"""
        ...
    
    @vertical_alignment.setter
    def vertical_alignment(self, value): # -> None:
        ...
    
    @property
    def width(self):
        """
        The width of this cell """
        ...
    
    @width.setter
    def width(self, value): # -> None:
        ...
    


class _Column(Parented):
    """
    Table column
    """
    def __init__(self, gridCol, parent) -> None:
        ...
    
    @property
    def cells(self): # -> tuple[Unknown, ...]:
        """
        Sequence of |_Cell| ins"""
        ...
    
    @property
    def table(self):
        """
        Reference to the |Table"""
        ...
    
    @property
    def width(self):
        """
        The width of this colum"""
        ...
    
    @width.setter
    def width(self, value): # -> None:
        ...
    


class _Columns(Parented):
    """
    Sequence of |_Column| insta"""
    def __init__(self, tbl, parent) -> None:
        ...
    
    def __getitem__(self, idx): # -> _Column:
        """
        Provide indexed access,"""
        ...
    
    def __iter__(self): # -> Generator[_Column, None, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    @property
    def table(self):
        """
        Reference to the |Table"""
        ...
    


class _Row(Parented):
    """
    Table row
    """
    def __init__(self, tr, parent) -> None:
        ...
    
    @property
    def cells(self): # -> tuple[Unknown, ...]:
        """
        Sequence of |_Cell| ins"""
        ...
    
    @property
    def height(self):
        """
        Return a |Length| objec"""
        ...
    
    @height.setter
    def height(self, value): # -> None:
        ...
    
    @property
    def height_rule(self):
        """
        Return the height rule """
        ...
    
    @height_rule.setter
    def height_rule(self, value): # -> None:
        ...
    
    @property
    def table(self):
        """
        Reference to the |Table"""
        ...
    


class _Rows(Parented):
    """
    Sequence of |_Row| objects """
    def __init__(self, tbl, parent) -> None:
        ...
    
    def __getitem__(self, idx): # -> _Row:
        """
        Provide indexed access,"""
        ...
    
    def __iter__(self): # -> Generator[_Row, None, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    @property
    def table(self):
        """
        Reference to the |Table"""
        ...
    


