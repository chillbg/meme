"""
This type stub file was generated by pyright.
"""

from ..shared import ElementProxy

"""
Style object hierarchy.
"""
def StyleFactory(style_elm): # -> _ParagraphStyle | _CharacterStyle | _TableStyle | _NumberingStyle:
    """
    Return a style object of th"""
    ...

class BaseStyle(ElementProxy):
    """
    Base class for the various """
    __slots__ = ...
    @property
    def builtin(self): # -> bool:
        """
        Read-only. |True| if th"""
        ...
    
    def delete(self): # -> None:
        """
        Remove this style defin"""
        ...
    
    @property
    def hidden(self):
        """
        |True| if display of th"""
        ...
    
    @hidden.setter
    def hidden(self, value): # -> None:
        ...
    
    @property
    def locked(self):
        """
        Read/write Boolean. |Tr"""
        ...
    
    @locked.setter
    def locked(self, value): # -> None:
        ...
    
    @property
    def name(self): # -> Literal['Caption', 'Footer', 'Header', 'Heading 1', 'Heading 2', 'Heading 3', 'Heading 4', 'Heading 5', 'Heading 6', 'Heading 7', 'Heading 8', 'Heading 9'] | None:
        """
        The UI name of this sty"""
        ...
    
    @name.setter
    def name(self, value): # -> None:
        ...
    
    @property
    def priority(self):
        """
        The integer sort key go"""
        ...
    
    @priority.setter
    def priority(self, value): # -> None:
        ...
    
    @property
    def quick_style(self):
        """
        |True| if this style sh"""
        ...
    
    @quick_style.setter
    def quick_style(self, value): # -> None:
        ...
    
    @property
    def style_id(self):
        """
        The unique key name (st"""
        ...
    
    @style_id.setter
    def style_id(self, value): # -> None:
        ...
    
    @property
    def type(self):
        """
        Member of :ref:`WdStyle"""
        ...
    
    @property
    def unhide_when_used(self):
        """
        |True| if an applicatio"""
        ...
    
    @unhide_when_used.setter
    def unhide_when_used(self, value): # -> None:
        ...
    


class _CharacterStyle(BaseStyle):
    """
    A character style. A charac"""
    __slots__ = ...
    @property
    def base_style(self): # -> _ParagraphStyle | _CharacterStyle | _TableStyle | _NumberingStyle | None:
        """
        Style object this style"""
        ...
    
    @base_style.setter
    def base_style(self, style): # -> None:
        ...
    
    @property
    def font(self): # -> Font:
        """
        The |Font| object provi"""
        ...
    


class _ParagraphStyle(_CharacterStyle):
    """
    A paragraph style. A paragr"""
    __slots__ = ...
    def __repr__(self): # -> str:
        ...
    
    @property
    def next_paragraph_style(self): # -> Self@_ParagraphStyle | _ParagraphStyle | _CharacterStyle | _TableStyle | _NumberingStyle:
        """
        |_ParagraphStyle| objec"""
        ...
    
    @next_paragraph_style.setter
    def next_paragraph_style(self, style): # -> None:
        ...
    
    @property
    def paragraph_format(self): # -> ParagraphFormat:
        """
        The |ParagraphFormat| o"""
        ...
    


class _TableStyle(_ParagraphStyle):
    """
    A table style. A table styl"""
    __slots__ = ...
    def __repr__(self): # -> str:
        ...
    


class _NumberingStyle(BaseStyle):
    """
    A numbering style. Not yet """
    __slots__ = ...


