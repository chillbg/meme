"""
This type stub file was generated by pyright.
"""

from .image import BaseImageHeader

"""
Objects related to parsing head"""
class Jpeg(BaseImageHeader):
    """
    Base class for JFIF and EXI"""
    @property
    def content_type(self): # -> Literal['image/jpeg']:
        """
        MIME content type for t"""
        ...
    
    @property
    def default_ext(self): # -> Literal['jpg']:
        """
        Default filename extens"""
        ...
    


class Exif(Jpeg):
    """
    Image header parser for Exi"""
    @classmethod
    def from_stream(cls, stream): # -> Self@Exif:
        """
        Return |Exif| instance """
        ...
    


class Jfif(Jpeg):
    """
    Image header parser for JFI"""
    @classmethod
    def from_stream(cls, stream): # -> Self@Jfif:
        """
        Return a |Jfif| instanc"""
        ...
    


class _JfifMarkers:
    """
    Sequence of markers in a JP"""
    def __init__(self, markers) -> None:
        ...
    
    def __str__(self) -> str:
        """
        Returns a tabular listi"""
        ...
    
    @classmethod
    def from_stream(cls, stream): # -> Self@_JfifMarkers:
        """
        Return a |_JfifMarkers|"""
        ...
    
    @property
    def app0(self):
        """
        First APP0 marker in im"""
        ...
    
    @property
    def app1(self):
        """
        First APP1 marker in im"""
        ...
    
    @property
    def sof(self):
        """
        First start of frame (S"""
        ...
    


class _MarkerParser:
    """
    Service class that knows ho"""
    def __init__(self, stream_reader) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream): # -> Self@_MarkerParser:
        """
        Return a |_MarkerParser"""
        ...
    
    def iter_markers(self): # -> Generator[_App0Marker | _App1Marker | _SofMarker | _Marker, None, None]:
        """
        Generate a (marker_code"""
        ...
    


class _MarkerFinder:
    """
    Service class that knows ho"""
    def __init__(self, stream) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream): # -> Self@_MarkerFinder:
        """
        Return a |_MarkerFinder"""
        ...
    
    def next(self, start): # -> tuple[Unknown, Unknown]:
        """
        Return a (marker_code, """
        ...
    


class _Marker:
    """
    Base class for JFIF marker """
    def __init__(self, marker_code, offset, segment_length) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream, marker_code, offset): # -> Self@_Marker:
        """
        Return a generic |_Mark"""
        ...
    
    @property
    def marker_code(self): # -> Unknown:
        """
        The single-byte code th"""
        ...
    
    @property
    def name(self): # -> str:
        ...
    
    @property
    def offset(self): # -> Unknown:
        ...
    
    @property
    def segment_length(self): # -> Unknown:
        """
        The length in bytes of """
        ...
    


class _App0Marker(_Marker):
    """
    Represents a JFIF APP0 mark"""
    def __init__(self, marker_code, offset, length, density_units, x_density, y_density) -> None:
        ...
    
    @property
    def horz_dpi(self): # -> Unknown | int:
        """
        Horizontal dots per inc"""
        ...
    
    @property
    def vert_dpi(self): # -> Unknown | int:
        """
        Vertical dots per inch """
        ...
    
    @classmethod
    def from_stream(cls, stream, marker_code, offset): # -> Self@_App0Marker:
        """
        Return an |_App0Marker|"""
        ...
    


class _App1Marker(_Marker):
    """
    Represents a JFIF APP1 (Exi"""
    def __init__(self, marker_code, offset, length, horz_dpi, vert_dpi) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream, marker_code, offset): # -> Self@_App1Marker:
        """
        Extract the horizontal """
        ...
    
    @property
    def horz_dpi(self): # -> Unknown:
        """
        Horizontal dots per inc"""
        ...
    
    @property
    def vert_dpi(self): # -> Unknown:
        """
        Vertical dots per inch """
        ...
    


class _SofMarker(_Marker):
    """
    Represents a JFIF start of """
    def __init__(self, marker_code, offset, segment_length, px_width, px_height) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream, marker_code, offset): # -> Self@_SofMarker:
        """
        Return an |_SofMarker| """
        ...
    
    @property
    def px_height(self): # -> Unknown:
        """
        Image height in pixels
"""
        ...
    
    @property
    def px_width(self): # -> Unknown:
        """
        Image width in pixels
 """
        ...
    


