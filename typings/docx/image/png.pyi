"""
This type stub file was generated by pyright.
"""

from .image import BaseImageHeader

class Png(BaseImageHeader):
    """
    Image header parser for PNG"""
    @property
    def content_type(self): # -> Literal['image/png']:
        """
        MIME content type for t"""
        ...
    
    @property
    def default_ext(self): # -> Literal['png']:
        """
        Default filename extens"""
        ...
    
    @classmethod
    def from_stream(cls, stream): # -> Self@Png:
        """
        Return a |Png| instance"""
        ...
    


class _PngParser:
    """
    Parses a PNG image stream t"""
    def __init__(self, chunks) -> None:
        ...
    
    @classmethod
    def parse(cls, stream): # -> Self@_PngParser:
        """
        Return a |_PngParser| i"""
        ...
    
    @property
    def px_width(self):
        """
        The number of pixels in"""
        ...
    
    @property
    def px_height(self):
        """
        The number of stacked r"""
        ...
    
    @property
    def horz_dpi(self): # -> int:
        """
        Integer dots per inch f"""
        ...
    
    @property
    def vert_dpi(self): # -> int:
        """
        Integer dots per inch f"""
        ...
    


class _Chunks:
    """
    Collection of the chunks pa"""
    def __init__(self, chunk_iterable) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream): # -> Self@_Chunks:
        """
        Return a |_Chunks| inst"""
        ...
    
    @property
    def IHDR(self):
        """
        IHDR chunk in PNG image"""
        ...
    
    @property
    def pHYs(self): # -> None:
        """
        pHYs chunk in PNG image"""
        ...
    


class _ChunkParser:
    """
    Extracts chunks from a PNG """
    def __init__(self, stream_rdr) -> None:
        ...
    
    @classmethod
    def from_stream(cls, stream): # -> Self@_ChunkParser:
        """
        Return a |_ChunkParser|"""
        ...
    
    def iter_chunks(self): # -> Generator[_IHDRChunk | _pHYsChunk | _Chunk, None, None]:
        """
        Generate a |_Chunk| sub"""
        ...
    


class _Chunk:
    """
    Base class for specific chu"""
    def __init__(self, chunk_type) -> None:
        ...
    
    @classmethod
    def from_offset(cls, chunk_type, stream_rdr, offset): # -> Self@_Chunk:
        """
        Return a default _Chunk"""
        ...
    
    @property
    def type_name(self): # -> Unknown:
        """
        The chunk type name, e."""
        ...
    


class _IHDRChunk(_Chunk):
    """
    IHDR chunk, contains the im"""
    def __init__(self, chunk_type, px_width, px_height) -> None:
        ...
    
    @classmethod
    def from_offset(cls, chunk_type, stream_rdr, offset): # -> Self@_IHDRChunk:
        """
        Return an _IHDRChunk in"""
        ...
    
    @property
    def px_width(self): # -> Unknown:
        ...
    
    @property
    def px_height(self): # -> Unknown:
        ...
    


class _pHYsChunk(_Chunk):
    """
    pYHs chunk, contains the im"""
    def __init__(self, chunk_type, horz_px_per_unit, vert_px_per_unit, units_specifier) -> None:
        ...
    
    @classmethod
    def from_offset(cls, chunk_type, stream_rdr, offset): # -> Self@_pHYsChunk:
        """
        Return a _pHYsChunk ins"""
        ...
    
    @property
    def horz_px_per_unit(self): # -> Unknown:
        ...
    
    @property
    def vert_px_per_unit(self): # -> Unknown:
        ...
    
    @property
    def units_specifier(self): # -> Unknown:
        ...
    


