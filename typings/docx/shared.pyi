"""
This type stub file was generated by pyright.
"""

"""
Objects shared by docx modules."""
class Length(int):
    """
    Base class for length const"""
    _EMUS_PER_INCH = ...
    _EMUS_PER_CM = ...
    _EMUS_PER_MM = ...
    _EMUS_PER_PT = ...
    _EMUS_PER_TWIP = ...
    def __new__(cls, emu): # -> Self@Length:
        ...
    
    @property
    def cm(self): # -> float:
        """
        The equivalent length e"""
        ...
    
    @property
    def emu(self): # -> Self@Length:
        """
        The equivalent length e"""
        ...
    
    @property
    def inches(self): # -> float:
        """
        The equivalent length e"""
        ...
    
    @property
    def mm(self): # -> float:
        """
        The equivalent length e"""
        ...
    
    @property
    def pt(self): # -> float:
        """
        Floating point length i"""
        ...
    
    @property
    def twips(self): # -> int:
        """
        The equivalent length e"""
        ...
    


class Inches(Length):
    """
    Convenience constructor for"""
    def __new__(cls, inches): # -> Length:
        ...
    


class Cm(Length):
    """
    Convenience constructor for"""
    def __new__(cls, cm): # -> Length:
        ...
    


class Emu(Length):
    """
    Convenience constructor for"""
    def __new__(cls, emu): # -> Length:
        ...
    


class Mm(Length):
    """
    Convenience constructor for"""
    def __new__(cls, mm): # -> Length:
        ...
    


class Pt(Length):
    """
    Convenience value class for"""
    def __new__(cls, points): # -> Length:
        ...
    


class Twips(Length):
    """
    Convenience constructor for"""
    def __new__(cls, twips): # -> Length:
        ...
    


class RGBColor(tuple):
    """
    Immutable value object defi"""
    def __new__(cls, r, g, b): # -> Self@RGBColor:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __str__(self) -> str:
        """
        Return a hex string rgb"""
        ...
    
    @classmethod
    def from_string(cls, rgb_hex_str): # -> Self@RGBColor:
        """
        Return a new instance f"""
        ...
    


def lazyproperty(f): # -> property:
    """
    @lazyprop decorator. Decora"""
    ...

def write_only_property(f): # -> property:
    """
    @write_only_property decora"""
    ...

class ElementProxy:
    """
    Base class for lxml element"""
    __slots__ = ...
    def __init__(self, element, parent=...) -> None:
        ...
    
    def __eq__(self, other) -> bool:
        """
        Return |True| if this p"""
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    @property
    def element(self): # -> Unknown:
        """
        The lxml element proxie"""
        ...
    
    @property
    def part(self):
        """
        The package part contai"""
        ...
    


class Parented:
    """
    Provides common services fo"""
    def __init__(self, parent) -> None:
        ...
    
    @property
    def part(self):
        """
        The package part contai"""
        ...
    


